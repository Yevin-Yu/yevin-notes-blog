import{_ as i,c as a,f as t,o as n}from"./app-1Weo8reD.js";const l={};function e(h,s){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="微前端" tabindex="-1"><a class="header-anchor" href="#微前端"><span>微前端</span></a></h2><p>微前端是一种类似于微服务的架构，它将前端应用分解为更小、更简单的可独立开发、测试和部署的块，从而加速复杂项目的开发。</p><p>优势</p><ol><li><strong>独立开发与部署</strong>：每个微前端都可以独立开发、测试和部署，从而加快开发速度和部署效率。</li><li><strong>技术栈无关</strong>：每个微前端可以使用不同的技术栈，从而提高项目的灵活性和可维护性。</li><li><strong>独立团队协作</strong>：每个微前端可以由不同的团队负责，从而提高团队协作效率。</li></ol><p><a href="/article/wjjyecqf/" target="_blank" rel="noopener noreferrer">微前端详解 - 构建灵活应用的全新方法</a></p><h2 id="页面加载流程" tabindex="-1"><a class="header-anchor" href="#页面加载流程"><span>页面加载流程</span></a></h2><ul><li>解析HTML，构建DOM树</li><li>解析CSS，构建CSSOM树</li><li>合并DOM树和CSSOM树，构建渲染树</li><li>根据渲染树进行布局，计算每个节点的位置和大小</li><li>绘制渲染树，将每个节点绘制到屏幕上</li></ul><p><a href="/article/156ko5ip/" target="_blank" rel="noopener noreferrer">页面加载流程 以及 CSS 与 JavaScript 的加载阻塞</a></p><h2 id="浏览器完整渲染流程" tabindex="-1"><a class="header-anchor" href="#浏览器完整渲染流程"><span>浏览器完整渲染流程</span></a></h2><p>浏览器的完整渲染流程可以分为多个步骤，主要包括以下几个阶段：</p><p><strong>请求阶段</strong></p><ul><li><strong>DNS 查询</strong>：浏览器首先通过 DNS（域名系统）将 URL 转换为 IP 地址。</li><li><strong>建立连接</strong>：使用 TCP/IP 协议与服务器建立连接，通常还会进行 TLS 握手（如果是 HTTPS）。</li></ul><p><strong>下载阶段</strong></p><ul><li><strong>发送 HTTP 请求</strong>：浏览器向服务器发送 HTTP 请求，请求所需的资源（HTML、CSS、JavaScript、图片等）。</li><li><strong>接收响应</strong>：服务器处理请求并返回 HTTP 响应，包含所请求的资源。</li></ul><p><strong>解析阶段</strong></p><ul><li><strong>HTML 解析</strong>：浏览器开始解析 HTML 文档，构建 DOM（文档对象模型）树。</li><li><strong>CSS 解析</strong>：同时，浏览器解析 CSS 文件，构建 CSSOM（CSS 对象模型）树。</li><li><strong>JavaScript 执行</strong>：如果 HTML 中包含 JavaScript，浏览器会在解析到 <code>&lt;script&gt;</code> 标签时执行 JavaScript 代码。JavaScript 可能会修改 DOM 和 CSSOM。</li></ul><p><strong>构建阶段</strong></p><ul><li><strong>渲染树构建</strong>：浏览器将 DOM 和 CSSOM 合并，构建渲染树（Render Tree）。渲染树只包含可见的元素及其样式信息。</li></ul><p><strong>布局阶段</strong></p><ul><li><strong>布局计算</strong>：浏览器计算每个节点在屏幕上的确切位置和大小，这个过程称为布局（或重排，Reflow）。</li></ul><p><strong>绘制阶段</strong></p><ul><li><strong>绘制</strong>：浏览器将渲染树中的每个节点绘制到屏幕上，这个过程称为绘制（Painting）。浏览器会将绘制的内容分成多个层（Layer），以提高性能。</li></ul><p><strong>合成阶段</strong></p><ul><li><strong>合成</strong>：在绘制完成后，浏览器将各个层合成到一起，形成最终的图像并显示在屏幕上。</li></ul><h2 id="页面性能优化" tabindex="-1"><a class="header-anchor" href="#页面性能优化"><span>页面性能优化</span></a></h2><p><strong>压缩代码</strong></p><ul><li>优化 CSS 和 JavaScript 代码，删除未使用的代码和重复的代码，减少文件大小。</li><li>使用工具如 UglifyJS、Terser 或 Webpack 的压缩功能，将 JavaScript、CSS 和 HTML 文件压缩成更小的文件。删除不必要的空格、注释和重复代码，减少文件大小。</li><li>现代框架如 React 和 Vue 提供了压缩和打包工具，如 Webpack 或 Rollup，可以自动压缩代码。</li><li>使用 Gzip 等压缩算法，在服务器端对文件进行压缩，减少传输数据的大小。</li></ul><p><strong>减少HTTP 请求</strong></p><ul><li>合并文件：将多个 CSS 或 JavaScript 文件合并为一个文件，减少 HTTP 请求的数量。</li><li>使用 CSS Sprites：将多个小图片合并为一个大的图片，通过 CSS 背景定位来显示所需的图片部分。</li></ul><p><strong>图像优化</strong></p><ul><li>使用适当的图像格式：根据图像的用途选择合适的格式，例如使用 WebP 格式代替 JPEG 或 PNG 格式，以获得更好的压缩率和更小的文件大小。</li><li>图标图片：使用字体图标（如 FontAwesome）或 SVG 图标代替位图图像，因为它们通常更小且可以缩放。</li><li>响应式图片：使用 <code>&lt;picture&gt;</code> 标签或 <code>srcset</code> 属性，根据屏幕大小和分辨率提供不同大小的图片，以减少不必要的加载。</li></ul><p><strong>延迟加载</strong></p><ul><li>懒加载：将非关键资源（如图片、视频、广告等）延迟加载，直到它们需要显示时才加载。可以使用 JavaScript 或框架提供的懒加载库来实现。</li><li>分块加载：将 JavaScript 文件分成多个小块，按需加载，而不是一次性加载整个文件。可以使用 Webpack 的代码分割功能来实现。</li></ul><p><strong>浏览器缓存</strong></p><ul><li>使用浏览器缓存：通过设置 HTTP 头部中的 Cache-Control、Expires 或 ETag，使浏览器缓存资源，减少重复请求。</li><li>版本控制：为资源文件添加版本号，当文件更新时，浏览器会下载新的文件而不是使用缓存的文件。</li></ul><p><strong>使用CDN</strong></p><ul><li>CDN 加速：将静态资源（如图像、CSS、JavaScript）托管在 CDN 上，利用其全球分布的服务器加速资源加载。</li></ul><h2 id="单点登录-sso" tabindex="-1"><a class="header-anchor" href="#单点登录-sso"><span>单点登录（SSO）</span></a></h2><p>单点登录（Single Sign-On，简称 SSO）是一种身份验证和授权机制，允许用户使用一组凭证登录多个应用程序或系统，而无需为每个应用程序或系统单独输入凭证。</p><p>可行方案：</p><p>建立一个专门的认证服务器，负责处理用户的登录和授权。当用户尝试访问某个应用程序时，该应用程序会将用户重定向到认证服务器进行身份验证。如果用户已经登录过，认证服务器会验证用户的凭证并返回一个授权令牌。应用程序可以使用该令牌来验证用户的身份，并允许用户访问受保护的资源。</p><p>主要步骤：</p><ol><li>用户访问应用程序。</li><li>应用程序将用户重定向到认证服务器。</li><li>认证服务器验证用户的凭证（例如用户名和密码）。</li><li>如果凭证有效，认证服务器会生成一个授权令牌，并将其返回给应用程序。同时会保存在本地存储或会话中。</li><li>应用程序使用授权令牌来验证用户的身份，并允许用户访问受保护的资源。</li><li>用户再次访问其他应用程序时，跳转到同一个认证服务器，认证服务器会检查本地存储或会话中是否存在授权令牌。如果存在，认证服务器会将授权令牌返回并跳转到原应用程序， 应用程序使用授权令牌来验证用户的身份，并允许用户访问受保护的资源。</li></ol><h2 id="http-部分加密" tabindex="-1"><a class="header-anchor" href="#http-部分加密"><span>HTTP 部分加密</span></a></h2><p>HTTP 部分加密（Partial Encryption of HTTP）是一种在 HTTP 请求和响应中只加密部分内容的技术。它允许在 HTTP 请求和响应中传输敏感数据，同时保持其他部分的数据以明文形式传输。</p><ol><li>只有在发送敏感数据时才使用加密，例如用户名和密码。 <ul><li>使用非对称加密算法（如 RSA）对敏感数据进行加密，服务器发送给客户端一个公钥。</li><li>客户端使用公钥对敏感数据进行加密，并将加密后的数据作为 HTTP 请求的一部分发送到服务器。</li><li>服务器接收到加密的密文后，使用私钥进行解密，获取原始的敏感数据。</li></ul></li></ol><p>...</p><h2 id="rtc" tabindex="-1"><a class="header-anchor" href="#rtc"><span>RTC</span></a></h2><p>实时通信（Real-Time Communication，简称 RTC）是一种允许用户实时交换音频、视频和数据的技术。旨在使浏览器能够直接进行实时通信，无需安装任何插件或第三方软件。WebRTC 提供了一套 API，允许开发者在浏览器中实现实时音频、视频和数据传输。</p><p>WebRTC 的主要组件包括：</p><table><thead><tr><th>组件</th><th>作用</th><th>关键API/协议</th></tr></thead><tbody><tr><td><strong>MediaStream (getUserMedia)</strong></td><td>获取本地摄像头、麦克风等媒体设备流</td><td><code>navigator.mediaDevices.getUserMedia()</code></td></tr><tr><td><strong>RTCPeerConnection</strong></td><td>建立点对点连接，处理编解码、NAT穿透、流量控制</td><td><code>new RTCPeerConnection()</code></td></tr><tr><td><strong>RTCDataChannel</strong></td><td>在已建立的连接上传输任意数据（文本/二进制）</td><td><code>createDataChannel()</code></td></tr><tr><td><strong>ICE (STUN/TURN)</strong></td><td>解决NAT穿透问题，获取真实公网地址或中继传输</td><td>ICE Candidate 交换</td></tr><tr><td><strong>SDP (Offer/Answer)</strong></td><td>协商会话参数（编解码器、分辨率等）</td><td><code>createOffer()</code>, <code>createAnswer()</code></td></tr><tr><td><strong>SRTP/SRTCP</strong></td><td>加密传输音视频流，防止窃听</td><td>自动启用</td></tr></tbody></table><p>完整流程示例：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 1. 获取本地媒体流</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> navigator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">mediaDevices</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getUserMedia</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> video</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> audio</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 2. 创建 PeerConnection</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RTCPeerConnection</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> iceServers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [{</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> urls</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">stun:stun.l.google.com:19302</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 3. 添加媒体流</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getTracks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">forEach</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">track</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addTrack</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">track</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> stream</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 4. 处理 ICE Candidate</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">onicecandidate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">candidate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    sendToPeer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">candidate</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> candidate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">candidate</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 5. 创建 Offer</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> offer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createOffer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setLocalDescription</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">offer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sendToPeer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">offer</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> sdp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> offer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sdp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 6. 接收 Answer（假设通过信令服务器）</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">async</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> handleAnswer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">answer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  await</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setRemoteDescription</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RTCSessionDescription</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">answer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 7. 接收远程流</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ontrack</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">remoteVideo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">).</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">srcObject</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">streams</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="视频格式" tabindex="-1"><a class="header-anchor" href="#视频格式"><span>视频格式</span></a></h2><p>以下是转换后的Markdown表格：</p><p>一、视频编码格式（Codec）</p><table><thead><tr><th>编码格式</th><th>浏览器支持情况</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>H.264</strong></td><td>全平台支持（包括iOS Safari）</td><td>硬件解码普及，高兼容性，专利授权</td><td>通用视频播放、WebRTC（iOS必备）</td></tr><tr><td><strong>H.265 (HEVC)</strong></td><td>部分新版浏览器（需版权许可）</td><td>比H.264节省50%带宽，4K/8K支持</td><td>超高清视频（兼容性风险高）</td></tr><tr><td><strong>VP8</strong></td><td>Chrome/Firefox/Edge</td><td>开源免版税，WebRTC默认编码</td><td>WebRTC实时通话</td></tr><tr><td><strong>VP9</strong></td><td>Chrome/Firefox/Edge</td><td>比VP8提升30%压缩率，支持8K</td><td>YouTube、高清WebRTC</td></tr><tr><td><strong>AV1</strong></td><td>Chrome/Edge/Firefox（逐步支持）</td><td>开源免版税，压缩率超H.265，解码复杂度高</td><td>未来主流（目前兼容性有限）</td></tr><tr><td><strong>AVC (H.264 Baseline)</strong></td><td>全平台</td><td>低复杂度版本，适合移动端</td><td>旧设备兼容</td></tr></tbody></table><p>二、视频容器格式（Container）</p><table><thead><tr><th>容器格式</th><th>支持编码格式</th><th>特点</th><th>前端使用场景</th></tr></thead><tbody><tr><td><strong>MP4</strong></td><td>H.264/H.265/AVC</td><td>最高兼容性，支持元数据和章节</td><td>网页内嵌视频（<code>&lt;video&gt;</code>标签）</td></tr><tr><td><strong>WebM</strong></td><td>VP8/VP9/AV1</td><td>开源免版税，支持透明通道（Alpha）</td><td>WebRTC、HTML5动态视频</td></tr><tr><td><strong>MOV</strong></td><td>H.264/ProRes</td><td>Apple生态专用，高画质</td><td>iOS设备上传视频</td></tr><tr><td><strong>MKV</strong></td><td>多编码支持</td><td>多轨道封装（字幕/音轨），但浏览器兼容性差</td><td>下载后本地播放</td></tr><tr><td><strong>TS</strong></td><td>H.264</td><td>流媒体分片格式</td><td>HLS直播流</td></tr><tr><td><strong>FLV</strong></td><td>H.264</td><td>低延迟，需Flash播放器（逐渐淘汰）</td><td>旧直播系统兼容</td></tr></tbody></table><h2 id="three-js-or-webgl-or-webgpu" tabindex="-1"><a class="header-anchor" href="#three-js-or-webgl-or-webgpu"><span>Three.js or WebGL or WebGPU</span></a></h2><p>Three.js 是一个基于 WebGL 的 JavaScript 库，用于创建和显示 3D 图形。它提供了一组易于使用的 API，使开发者能够轻松地创建 3D 场景、材质、光照和动画。</p><p>WebGL 是一种用于在网页上渲染 3D 图形的 API。它基于 OpenGL ES，允许开发者使用 JavaScript 和 WebGL 上下文在网页上绘制 3D 图形。WebGL 提供了丰富的功能和性能，使开发者能够创建复杂的 3D 场景和动画。</p><p>WebGPU 是一种用于在网页上渲染 3D 图形的 API，由 W3C 和 Khronos Group 共同开发。它旨在提供比 WebGL 更高的性能和更低的功耗。WebGPU 提供了更高级的图形编程接口，使开发者能够更灵活地控制图形渲染过程。</p><h2 id="uniapp-调用设备信息" tabindex="-1"><a class="header-anchor" href="#uniapp-调用设备信息"><span>Uniapp 调用设备信息</span></a></h2><ol><li><p>可以借助 uni-app 提供的方法获取设备信息，例如 uni.getSystemInfoSync() 方法可以获取设备的系统信息，包括设备型号、操作系统版本等。</p></li><li><p>可以通过原生方法封装，调用设备信息，例如使用 JavaScriptBridge 调用原生方法获取设备信息。</p></li></ol>`,65)]))}const r=i(l,[["render",e],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/InterView/6fn7wm4q/","title":"面试记录 - 前端其他内容","lang":"zh-CN","frontmatter":{"title":"面试记录 - 前端其他内容","createTime":"2025/01/13 10:50:52","permalink":"/InterView/6fn7wm4q/"},"headers":[],"readingTime":{"minutes":9.66,"words":2899},"git":{"updatedTime":1747111428000,"contributors":[{"name":"Yevin Yu","email":"yuwb0521@outlook.com","commits":4,"avatar":"https://avatars.githubusercontent.com/Yevin Yu?v=4","url":"https://github.com/Yevin Yu"}]},"filePathRelative":"notes/InterView/前端其他内容.md","bulletin":false}');export{r as comp,k as data};
