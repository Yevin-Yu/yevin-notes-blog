import{_ as l,c as a,f as p,o as e}from"./app-1Weo8reD.js";const t={};function n(o,i){return e(),a("div",null,i[0]||(i[0]=[p('<h2 id="关于学习" tabindex="-1"><a class="header-anchor" href="#关于学习"><span>关于学习</span></a></h2><p>在之前的一段时间内，会经常纠结后面的学习计划是扩大自己的知识面还是继续深度钻研前端相关技术。</p><p>由于时间或者精力的限制，没有办法做到两者兼顾。</p><ul><li>广学习，就是扩大自己的知识面，学习更多种语言或者其他内容。</li><li>深学习，就是在自己已有的基础上进行更加深入的学习研究，通过学习让自己变成该方面的老手或者专家。</li></ul><p>在我看来广度学习，意味着自己将从一个前端开发走上全能，或者全栈开发。而深度学习，则是自己前端开发生涯中的一个进阶过程。然而，随着自己的学习，我发现其实深度学习和广度学习是密不可分的，为了我们在某一方面了解认知的更加深入，我们需要去学习或者获取其他方面的知识。换句话说，广度的知识面是我们在深度学习的副产品。</p><p>所以我个人现在坚持在前端开发方面进行更加深度的学习和了解，也不会拒绝中间广度的学习机会，更加全面学习认知。</p><h3 id="前端初级" tabindex="-1"><a class="header-anchor" href="#前端初级"><span>前端初级</span></a></h3><p>个人人为，在初级学习阶段，我们目标是能够独立完成项目的前端部分。需要学习前端的元老级三件套 <code>html</code> ，<code>css</code> ，<code>JavaScript</code> 。然后在根据自己的需要选择学习一个流程框架技术即可。</p><p>在我看来，我们不应该把过多的时间放到学习各种流行框架上。可以在使用的时候在进行学习或者阅读官网文档等，也可以快速的上手使用。但是前提条件是我们要对前端的基础 <code>html</code> 和 <code>JavaScript</code> 做到十分的熟练。</p><p>短时间内最具有性价比的事情，就是深入学习基本功，也就是 <code>html</code> , <code>css</code> , <code>JavaScript</code> 。 为什么这么说？</p><ul><li>对于前端来说，基本功是前端所有的一切的基石。目前就算是后台开发、测试、UI，也都会了解一些前端方面内容。</li><li>前端框架选择较多，并且更新较快，并且所有框架都基于前端基本功开发编写。学好基本功，能让我们更快的学习和上手各种框架。</li><li>前端框架可能会更新换代或者淘汰，如果我们学习花费太多时间，但是日常工作中却没有使用，会浪费我们的时间精力。</li><li>前端基本功，已经出现快30年。基本成型稳定，不会被轻易替换代替。</li></ul><h4 id="需要掌握技术和知识" tabindex="-1"><a class="header-anchor" href="#需要掌握技术和知识"><span>需要掌握技术和知识</span></a></h4><ol><li><p>基础技术：深入理解 HTML 、CSS 和 JavaScript 的基础语法和常用属性，能够编写结构清晰、符合语义的 HTML 代码，以及响应式的 CSS 布局。</p></li><li><p>前端框架入门：熟悉至少一种主流前端框架（如 React、Vue 或 Angular ）的基本使用，理解组件化开发的概念。</p></li><li><p>版本控制：掌握 Git 的基本操作，能够进行代码提交、分支管理、合并冲突解决等。</p></li><li><p>调试工具：熟练使用浏览器的开发者工具进行页面元素调整、CSS 样式查看和 JavaScript 调试。</p></li><li><p>基本的构建流程：了解 npm、yarn 等包管理工具的使用，以及 Webpack 等构建工具的基本配置。</p></li><li><p>代码质量与规范：了解代码规范（如 ESLint ）和代码风格的重要性，能够遵循团队的编码规范。</p></li></ol><h4 id="其他内容" tabindex="-1"><a class="header-anchor" href="#其他内容"><span>其他内容</span></a></h4><p>除开上面说的一些，我们在日常工作中还可能用到其他一些内容，这些内容仅了解即可，大多数为开箱即用插件：</p><ul><li>UI组件：Element-UI（PC端），Vant-UI（手机端），Bootstrap（响应式）</li><li>图表：Echarts</li><li>图标：iconfont</li><li>地图：Baidu Map，Google Map</li></ul><h3 id="前端进阶" tabindex="-1"><a class="header-anchor" href="#前端进阶"><span>前端进阶</span></a></h3><p>如果我们需要在前端技术上有更深入的了解和提升，避不开的就是各种原理和基础。</p><ul><li>计算机网络</li><li>浏览器渲染原理</li><li>网络数据传输</li><li>后端如何响应前端请求</li></ul><h4 id="需要掌握技术和知识-1" tabindex="-1"><a class="header-anchor" href="#需要掌握技术和知识-1"><span>需要掌握技术和知识</span></a></h4><p>在初级基础上，我们还需要学习和熟悉以下技术或者知识：</p><ol><li><p>深入 JavaScript ：精通 JavaScript 高级特性（如闭包、原型链、异步编程等），理解 ES6+ 新特性，并能够灵活运用。</p></li><li><p>前端性能优化：掌握前端性能优化的各种策略，如图片优化、代码分割、懒加载、缓存策略等。</p></li><li><p>框架与库的高级应用：深入理解所选前端框架的工作原理，能够进行复杂组件的设计与开发，了解并使用相关状态管理工具和路由库。</p></li><li><p>响应式设计与移动优先：精通各种布局技术（ Flexbox 、 Grid 等），能高效实现适应不同设备的界面。</p></li><li><p>前端工程化：熟练使用构建工具进行模块化开发、自动化测试、持续集成等，能够搭建和维护前端开发环境。</p></li><li><p>网络与安全：深入了解 HTTP/HTTPS 协议，熟悉 RESTful API 设计，了解前端安全相关知识，如 XSS、CSRF 防护。</p></li></ol><h3 id="前端资深" tabindex="-1"><a class="header-anchor" href="#前端资深"><span>前端资深</span></a></h3><h4 id="需要掌握技术和知识-2" tabindex="-1"><a class="header-anchor" href="#需要掌握技术和知识-2"><span>需要掌握技术和知识</span></a></h4><ol><li><p>架构设计：能够设计和实施大型前端项目的架构，考虑可维护性、可扩展性和性能。</p></li><li><p>技术领导力：指导团队采用最新的前端技术，制定技术选型方案，解决复杂的技术难题。</p></li><li><p>全栈能力：对后端技术（如 Node.js 、数据库、服务器部署等）有一定的了解，能够进行全栈开发。</p></li><li><p>性能与可访问性：深入理解前端性能优化的高级策略，重视并实践网站的可访问性（ a11y ）标准。</p></li><li><p>持续学习与创新：跟踪前端技术发展趋势，对 WebAssembly 、PWA 、WebGL 等前沿技术有所研究。</p></li><li><p>团队协作与项目管理：具备良好的沟通协调能力，能够有效管理项目进度，带领团队高效完成任务。</p></li></ol><h3 id="计算机基础知识" tabindex="-1"><a class="header-anchor" href="#计算机基础知识"><span>计算机基础知识</span></a></h3><p>基础知识为深入学习计算机科学的各个分支提供了坚实的基础，无论是打算从事软件开发、网络安全、数据分析还是人工智能等领域，都是不可或缺的。</p><p>在计算机行业，技术的更新换代速度很快，我们想要跟上各种技术迭代，看上去难度很大。但是我们可以换一种方式，就像上面前端初级中说的一样，我们可以选学习一些基础知识，这些知识更新迭代速度不快，但是在计算机行业却显的越来越重要。</p><h4 id="前端优先知识推荐" tabindex="-1"><a class="header-anchor" href="#前端优先知识推荐"><span>前端优先知识推荐</span></a></h4><ul><li>浏览器原理</li><li>操作系统原理</li><li>算法结构</li><li>数据结构</li></ul><h4 id="基础知识推荐清单" tabindex="-1"><a class="header-anchor" href="#基础知识推荐清单"><span>基础知识推荐清单</span></a></h4><ol><li><p>计算机系统组成：理解计算机硬件的基本组成部分，包括中央处理器（ CPU ）、内存（ RAM ）、硬盘、输入输出设备（如键盘、鼠标、显示器）以及主板等，以及它们是如何协同工作的。</p></li><li><p>数据表示与存储：学习二进制数系统、位与字节的概念，以及整数、浮点数、字符等数据类型在计算机中的表示方法。了解不同的存储介质（如磁盘、闪存）和存储单位（ KB、MB、GB 等）。</p></li><li><p>计算机网络：掌握网络的基本概念，包括 OSI 模型或 TCP/IP 模型，了解局域网（ LAN ）、广域网（ WAN ）、互联网的工作原理，IP 地址、子网掩码、DNS 等基础知识。</p></li><li><p>操作系统：学习操作系统的功能和类型（如 Windows、Linux、macOS），进程与线程、文件系统、设备管理等概念。</p></li><li><p>算法与数据结构：这是计算机科学的核心部分，涉及排序、搜索、递归、贪心、动态规划等基本算法，以及数组、链表、栈、队列、树、图等数据结构。</p></li><li><p>编程基础：至少掌握一门编程语言（如 Python、C++、Java ），理解变量、常量、条件语句、循环、函数、类和对象等基本编程概念。</p></li><li><p>计算机安全：了解计算机安全的基本原则，包括密码学基础、防火墙、病毒与恶意软件防护、网络安全措施等。</p></li><li><p>数据库基础：了解数据库管理系统（ DBMS ）的基本概念，关系型数据库（如 SQL ）和非关系型数据库（ NoSQL ）的区别，以及SQL查询语言的基础。</p></li><li><p>软件工程：学习软件开发生命周期（需求分析、设计、编码、测试、维护），软件项目管理，版本控制（如 Git ）等。</p></li><li><p>计算机科学理论：包括计算理论（图灵机、可计算性）、编译原理、计算机体系结构等更深层次的内容。</p></li></ol>',32)]))}const c=l(t,[["render",n],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/article/8q1bvz25/","title":"个人心得：关于前端学习的体会与反思","lang":"zh-CN","frontmatter":{"title":"个人心得：关于前端学习的体会与反思","author":"耶温","createTime":"2024/06/23 11:58:26","permalink":"/article/8q1bvz25/"},"headers":[],"readingTime":{"minutes":7.7,"words":2310},"git":{"updatedTime":1733132502000,"contributors":[{"name":"Yevin Yu","email":"yuwb0521@outlook.com","commits":1,"avatar":"https://avatars.githubusercontent.com/Yevin Yu?v=4","url":"https://github.com/Yevin Yu"}]},"filePathRelative":"Blog/Tools/前端学习个人心得.md","categoryList":[{"id":"be8df1","sort":10000,"name":"Blog"},{"id":"f06ccb","sort":10005,"name":"Tools"}],"bulletin":false}');export{c as comp,r as data};
